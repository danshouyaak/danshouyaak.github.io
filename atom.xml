<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个有趣的博客</title>
  
  <subtitle>生活明朗，万物可爱</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-09T08:27:17.993Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>cot</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>myAI</title>
    <link href="http://example.com/posts/554a246d.html"/>
    <id>http://example.com/posts/554a246d.html</id>
    <published>2024-09-09T08:24:00.000Z</published>
    <updated>2024-09-09T08:27:17.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h3><ol><li>vite,vue3,element-plus,sse</li></ol><h3 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a>后端技术</h3><ol><li>springboot，spingMvc，sse，AIGC</li></ol><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul><li><input disabled="" type="checkbox"> 前端页面搭建-参考<a href="https://chat18.aichatos8.com/#/chat/1724478369227%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%90%AD%E5%BB%BA">https://chat18.aichatos8.com/#/chat/1724478369227</a></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/46967437/1724572172528-3a493c96-95ea-4604-b1b4-8709a50a02e8.png"></p><p><a href="https://www.yucongming.com/">https://www.yucongming.com/</a></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/46967437/1724573419672-1d781589-ca0c-4fca-a50f-bb4a0f1ae188.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/46967437/1724575400372-e07cd152-4f1e-4237-9769-00a9ed4b4e3d.png"></p><h2 id="sse实现"><a href="#sse实现" class="headerlink" title="sse实现"></a>sse实现</h2><h3 id="使用Rxjava实现流式传输"><a href="#使用Rxjava实现流式传输" class="headerlink" title="使用Rxjava实现流式传输"></a>使用Rxjava实现流式传输</h3><p>参考<a href="https://www.cnblogs.com/1996-Chinese-Chen/p/17913287.html">https://www.cnblogs.com/1996-Chinese-Chen/p/17913287.html</a></p><p>流式返回例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 流式调用调用</span><br><span class="line"> *</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@GetMapping(value = &quot;/GetHello/sse&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line">public Flux&lt;String&gt; GetHelloStream() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return Flux.interval(Duration.ofSeconds(1)).map(sequence -&gt; &quot;Event &quot; + sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">rxJavaDemo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">// 创建一个流，每秒发射一个递增的整数（数据流变化）</span></span><br><span class="line">Flowable&lt;Long&gt; flowable = Flowable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">.map(i -&gt; i + <span class="number">1</span>)</span><br><span class="line">.subscribeOn(Schedulers.io()); <span class="comment">// 指定创建流的线程池</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅 Flowable 流，并打印每个接受到的数字</span></span><br><span class="line">flowable.observeOn(Schedulers.io())</span><br><span class="line">.doOnNext(item -&gt; System.out.println(item.toString()))</span><br><span class="line">.subscribe();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让主线程睡眠，以便观察输出</span></span><br><span class="line">Thread.sleep(<span class="number">10000L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sse 流式调用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/GetHello/sse&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> SseEmitter <span class="title function_">GetHelloStream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 建立 SSE 连接对象，0 表示永不超时</span></span><br><span class="line">    <span class="type">SseEmitter</span> <span class="variable">sseEmitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SseEmitter</span>(<span class="number">0L</span>);</span><br><span class="line">    <span class="comment">// AI 生成，SSE 流式返回</span></span><br><span class="line">    <span class="comment">//        todo 这里需要改为让用户输入的</span></span><br><span class="line">    Flowable&lt;ModelData&gt; modelDataFlowable = aiManager.doStreamRequest(<span class="string">&quot;你是一名中医&quot;</span>, <span class="string">&quot;你好&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    modelDataFlowable.observeOn(Schedulers.io())</span><br><span class="line">    .map(modelData -&gt; modelData.getChoices().get(<span class="number">0</span>).getDelta().getContent())</span><br><span class="line">    <span class="comment">//                把空格替换成空</span></span><br><span class="line">    .map(message -&gt; message.replaceAll(<span class="string">&quot;\\s&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="comment">//                判空处理</span></span><br><span class="line">    .filter(StrUtil::isNotBlank)</span><br><span class="line">    .flatMap(message -&gt; &#123;</span><br><span class="line">        List&lt;Character&gt; characterList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//            字符处理</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : message.toCharArray()) &#123;</span><br><span class="line">            characterList.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Flowable.fromIterable(characterList);</span><br><span class="line">    &#125;)</span><br><span class="line">    .doOnNext(character -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sseEmitter.send(character.toString()); <span class="comment">// 发送数据到客户端</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            sseEmitter.completeWithError(e); <span class="comment">// 错误处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).doOnError((e) -&gt; log.error(<span class="string">&quot;sse error&quot;</span>, e))</span><br><span class="line">    .doOnComplete(sseEmitter::complete).subscribe();</span><br><span class="line">    <span class="keyword">return</span> sseEmitter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SSE Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#aaa</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/* 允许换行 */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#aaa</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>; <span class="comment">/* 添加间隔 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-decoration</span>: none; <span class="comment">/* 去除下划线 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue; <span class="comment">/* 设置链接颜色 */</span></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> eventSource = <span class="keyword">new</span> <span class="title class_">EventSource</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&quot;http://localhost:8024/Hello/GetHello/sse&quot;</span></span></span><br><span class="line"><span class="language-javascript">      );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      eventSource.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;aaa&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        a.<span class="property">innerHTML</span> += <span class="string">&quot;&lt;a&gt;&quot;</span> + event.<span class="property">data</span> + <span class="string">&quot;&lt;/a&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Received message: &quot;</span> + event.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      eventSource.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error occurred&quot;</span>, event);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (event.<span class="property">eventPhase</span> === <span class="title class_">EventSource</span>.<span class="property">CLOSED</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          eventSource.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>待完成：（简-&gt;难）</p><ul><li><input checked="" disabled="" type="checkbox"> 简化代码</li><li><input disabled="" type="checkbox"> 配置prompt模板</li><li><input disabled="" type="checkbox"> 根据应用场景设置温度值 <font style="color:#bcbec4;background-color:#FBDE28;">temperature 为 null 时，默认值为 0.99f</font></li><li><input disabled="" type="checkbox"> 聊天发送信息优化</li><li><input checked="" disabled="" type="checkbox"> 设置buttom的loading</li><li><input disabled="" type="checkbox"> 有记忆模式</li><li><input disabled="" type="checkbox"> 如何存储聊天记录</li><li><input disabled="" type="checkbox"> 后端限制用户刷流量，需要进行限制（当用户在回答中，不能够继续提问）</li></ul><p><font style="color:#bcbec4;background-color:#FBDE28;"></font></p><p><font style="color:#bcbec4;background-color:#FBDE28;"></font></p><h2 id="前端同一封装请求"><a href="#前端同一封装请求" class="headerlink" title="前端同一封装请求"></a>前端同一封装请求</h2><ol><li>安装axios，使用通过axios发送请求</li><li>测试前后端联调</li><li>调试see推送</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const handleSSESubmit = async () =&gt; &#123;</span><br><span class="line">  if (input.value.trim() == &#x27;&#x27;) &#123;</span><br><span class="line">    ElMessage.error(&#x27;输入内容不能为空！！！&#x27;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;触发sse&#x27;);</span><br><span class="line">  const eventSource = new EventSource(</span><br><span class="line">    // todo 手动填写完整的后端地址</span><br><span class="line">    &#x27;http://localhost:8024/Hello/GetHello/sse&#x27; +</span><br><span class="line">    `?content=$&#123;input.value&#125;`</span><br><span class="line">  );</span><br><span class="line">  const newAnswer = &#123;</span><br><span class="line">    type: &#x27;user&#x27;,</span><br><span class="line">    time: new Date(),</span><br><span class="line">    msg: &#x27;&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">  msgList.value[0].list.push(newAnswer)</span><br><span class="line">  eventSource.onmessage = function(event) &#123;</span><br><span class="line">    msgList.value[0].list[msgList.value[0].list.length - 1].msg = msgList.value[0].list[msgList.value[0].list.length - 1].msg+event.data;</span><br><span class="line">    console.log(event.data);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  eventSource.onerror = function(event) &#123;</span><br><span class="line">    if (event.eventPhase === EventSource.CLOSED) &#123;</span><br><span class="line">      console.log(&#x27;关闭连接&#x27;);</span><br><span class="line">      eventSource.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统设计&quot;&gt;&lt;a href=&quot;#系统设计&quot; class=&quot;headerlink&quot; title=&quot;系统设计&quot;&gt;&lt;/a&gt;系统设计&lt;/h1&gt;&lt;h2 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>好友匹配系统</title>
    <link href="http://example.com/posts/5a0062e4.html"/>
    <id>http://example.com/posts/5a0062e4.html</id>
    <published>2024-08-03T08:56:03.000Z</published>
    <updated>2024-08-13T09:16:28.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口查询"><a href="#接口查询" class="headerlink" title="接口查询"></a>接口查询</h2><p>​1.sql查询（实现简单，可以拆分查询进一步优化）</p><p>​2.内存查询（灵活，可以通过并发进一步优化）</p><ul><li>如果参数可以分析，根据用户的参数去选择查询方式，比如标签数</li><li>如果参数不可分析，并且数据库连接足够，内存空间足够，可以并发同时查询，谁先返回用谁</li><li>还可以sql查询与内存计算相结合，比如先用sql过滤掉部分</li></ul><h2 id="用户中心来集中提供用户检索，操作，登录，鉴权"><a href="#用户中心来集中提供用户检索，操作，登录，鉴权" class="headerlink" title="用户中心来集中提供用户检索，操作，登录，鉴权"></a>用户中心来集中提供用户检索，操作，登录，鉴权</h2><h2 id="存量用户信息导入及同步"><a href="#存量用户信息导入及同步" class="headerlink" title="存量用户信息导入及同步"></a>存量用户信息导入及同步</h2><p>1.把所有星球用户信息导入</p><p>2.把写了自我介绍的同学的标签信息导入</p><h3 id="看上了信息怎么抓取"><a href="#看上了信息怎么抓取" class="headerlink" title="看上了信息怎么抓取?"></a>看上了信息怎么抓取?</h3><p>1.分析原网站是怎么获取这些数据的？哪个接口？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;https://api.zsxq.com/v2/hashtags/48844541281228/topics?count=20&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;authority: api.zsxq.com&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;accept: application/json, text/plain, */*&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;accept-language: zh-CN,zh;q=0.9&quot;</span> ^</span><br><span class="line"></span><br><span class="line">  -H <span class="string">&quot;origin: https://wx.zsxq.com&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;referer: https://wx.zsxq.com/&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-ch-ua: ^\^&quot;</span>Not_A Brand^\^<span class="string">&quot;;v=^\^&quot;</span>8^\^<span class="string">&quot;, ^\^&quot;</span>Chromium^\^<span class="string">&quot;;v=^\^&quot;</span>120^\^<span class="string">&quot;, ^\^&quot;</span>Google Chrome^\^<span class="string">&quot;;v=^\^&quot;</span>120^\^<span class="string">&quot;&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-ch-ua-mobile: ?0&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-ch-ua-platform: ^\^&quot;</span>Windows^\^<span class="string">&quot;&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-fetch-dest: empty&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-fetch-mode: cors&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;sec-fetch-site: same-site&quot;</span> ^</span><br><span class="line">  -H <span class="string">&quot;user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36&quot;</span> ^</span><br><span class="line">  --compressed</span><br></pre></td></tr></table></figure><p>2.用程序去调用接口（java&#x2F;python都可以）</p><p>3.处理（清洗一下数据），之后就可以写到数据库</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1.从execl中导入全量用户数据，<strong>盘重</strong></p><p>2.抓取写了自我介绍的同学信息，提取出用户昵称，用户唯一id，自我介绍信息</p><p>3.从自我介绍中提取信息，然后写到数据库中</p><p>easy excel：<a href="https://easyexcel.opensource.alibaba.com/">https://easyexcel.opensource.alibaba.com/</a></p><h3 id="Easy-excel"><a href="#Easy-excel" class="headerlink" title="Easy excel"></a>Easy excel</h3><p>两种读取方式</p><p>​1.确定表头：建立对象，</p><p>​2.不确定表头：每一行数据映射为Map&lt;String,Obj&gt;</p><p>两种读取模式：</p><p>1.监听器：</p><p>2.同步读：无需创建监听器，一次性获取完整数据。操作方便简单，但是数据量大时会有时等待时常，也可能有内存溢出</p><h2 id="前端路由传值"><a href="#前端路由传值" class="headerlink" title="前端路由传值"></a>前端路由传值</h2><p>1.query &#x3D;&gt; url searchParams,url后附加参数，传递的值长度有限</p><ol start="2"><li></li></ol><h2 id="配置跨域"><a href="#配置跨域" class="headerlink" title="配置跨域"></a>配置跨域</h2><p>一般跨域问题后端处理比较合理，不需要每个前端后需要进行配置跨域</p><h2 id="改造用户中心，把单机登录改为分布式session登录"><a href="#改造用户中心，把单机登录改为分布式session登录" class="headerlink" title="改造用户中心，把单机登录改为分布式session登录"></a>改造用户中心，把单机登录改为分布式session登录</h2><h3 id="Session共享"><a href="#Session共享" class="headerlink" title="Session共享"></a>Session共享</h3><p>种session的时候注意范围，cookie.domain</p><p>比如两个域名：</p><p>​aaa.com</p><p>​bb.com</p><p>如果要共享，可以种一个更高级的公共域名</p><h3 id="为什么服务器A登录后，请求发到服务器B，不认识该用户？"><a href="#为什么服务器A登录后，请求发到服务器B，不认识该用户？" class="headerlink" title="为什么服务器A登录后，请求发到服务器B，不认识该用户？"></a>为什么服务器A登录后，请求发到服务器B，不认识该用户？</h3><p>解决方案：<strong>共享存储</strong>，而不是把数据放到单台服务器的内存中</p><h3 id="如何共享存储？"><a href="#如何共享存储？" class="headerlink" title="如何共享存储？"></a>如何共享存储？</h3><p>核心思想：把数据放到同一个地方去集中管理。</p><p>1.redis（基于内存的k&#x2F;v数据库）此处选择redis，因为用户心虚读取&#x2F;是否登录的判断及其<strong>频繁</strong>，redis基于内存，读写性能很高，简单的数据单机qps 5w-10w</p><p>2.mysql</p><p>3.文件服务器ceph</p><h2 id="实现Session共享"><a href="#实现Session共享" class="headerlink" title="实现Session共享"></a>实现Session共享</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入spring-session与redis整合，使得自动将session存储到redis中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改spring-session存储配置<code>spring.session.store-type</code>默认值none，表示存储在服务器</p><p>设置<code>spring.session.store-type</code>默认值redis，但保存Session的时候就会默认存储到redis中</p><h2 id="其他单点登录方案"><a href="#其他单点登录方案" class="headerlink" title="其他单点登录方案"></a>其他单点登录方案</h2><p>常用的就是jwt。</p><p>Redis Session 对比 jwt 的优缺点：<a href="https://zhuanlan.zhihu.com/p/108999941">https://zhuanlan.zhihu.com/p/108999941</a></p><h2 id="主页开发"><a href="#主页开发" class="headerlink" title="主页开发"></a>主页开发</h2><p>最简单：直接list列表</p><p>模拟1000万个用户 再去查询</p><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>1.用可视化界面：适合一次性导入，数据量可控</p><p>2.写程序：for循环 建议分批，不要一把梭哈（可以用接口来控制）<em><strong>要保证可控</strong></em></p><p>3.执行sql导入语句</p><h3 id="编写一次性任务"><a href="#编写一次性任务" class="headerlink" title="编写一次性任务"></a>编写一次性任务</h3><h2 id="数据库查询慢？"><a href="#数据库查询慢？" class="headerlink" title="数据库查询慢？"></a>数据库查询慢？</h2><p>用缓存：提前把数据取好保存好，（通常保存到读写更快的介质，比如内存），就可以更快的读取</p><ul><li>redis（分布式缓存）</li><li>memcached（分布式）</li><li>Etcd（云原生架构的一个分布式存储，存储配置，扩容能力）</li><li>ehcache（单机）</li><li>Caffeine（java内存缓存之王，高性能）</li><li>Google Guava</li></ul><p>预先把数据先查询来，放到一个更快读取的地方，不用再查询数据库。（缓存）</p><p> 预加载缓存，定时更新任务（定时任务）</p><p>多个机器都要执行任务么？（分布式锁：控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了）</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p> NoSQL</p><p>key-value存储系统（区别Mysql，他存储的时键值对）</p><h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>String字符串类型：name:”‘xxx’</p><p>List列表：names:[“xxx”,”xxxx”]</p><p>Set列表：names:[“xxx”,”xxxx”] (值不能重复)</p><p>Hash哈希：nameAge：{“x1”:1,”x2”:1} (key不能重复)</p><p>Zset集合：names：{x-9,t-0} (会关联一个分数，适合做排行榜)</p><h3 id="自定义redis序列化器"><a href="#自定义redis序列化器" class="headerlink" title="自定义redis序列化器"></a>自定义redis序列化器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义redis序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line"><span class="comment">//        指定k:v键值对</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        设置连接工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="comment">//        设置序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>独立于 Spring 操作 Redis 的 Java 客户端</p><p>要配合 Jedis Pool 使用</p><h4 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h4><p><strong>高阶</strong> 的操作 Redis 的 Java 客户端</p><p>异步、连接池</p><h4 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h4><p>分布式操作 Redis 的 Java 客户端，让你像在使用本地的集合一样操作 Redis（分布式 Redis 数据网格）</p><h4 id="JetCache"><a href="#JetCache" class="headerlink" title="JetCache"></a>JetCache</h4><p>不再赘述</p><h4 id="几种库对比"><a href="#几种库对比" class="headerlink" title="几种库对比"></a>几种库对比</h4><ol><li>如果你用的是 Spring，并且没有过多的定制化要求，可以用 Spring Data Redis，最方便</li><li>如果你用的不是 Spring，并且追求简单，并且没有过高的性能要求，可以用 Jedis + Jedis Pool</li><li>如果你的项目不是 Spring，并且追求高性能、高定制化，可以用 Lettuce，支持异步、连接池</li><li>如果你的项目是分布式的，需要用到一些分布式的特性（比如分布式锁、分布式集合），推荐用 redisson</li></ol><h2 id="设计缓存的key"><a href="#设计缓存的key" class="headerlink" title="设计缓存的key"></a>设计缓存的key</h2><p>不用用户看到数据不同</p><p>systemld：module：func：options（不要和别人冲突）</p><p>(例)xxx:user:recommed:userId（userId时动态的用户id）</p><h4 id="redis-内存不能无限增加，一定要设置过期时间"><a href="#redis-内存不能无限增加，一定要设置过期时间" class="headerlink" title="redis 内存不能无限增加，一定要设置过期时间"></a>redis 内存不能无限增加，一定要设置过期时间</h4><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>问题：即使用了缓存，第一个用户访问还是很慢（假如第一个访客是老板，哦豁！）。</p><p>缓存预热的优点：</p><ol><li>解决上面的问题，可以让用户始终访问很快</li><li>也能一定程度上保护数据库</li></ol><p>缺点：</p><ol><li>增加开发成本（你要额外的开发、设计）</li><li>预热的时机和时间如果错了，有可能你缓存的数据不对或者太老</li><li>需要占用额外空间</li></ol><h3 id="怎么缓存预热？"><a href="#怎么缓存预热？" class="headerlink" title="怎么缓存预热？"></a>怎么缓存预热？</h3><ol><li>定时任务</li><li>手动触发</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>用定时任务，每天刷新所有用户的推荐列表。</p><p>注意点：</p><ol><li>缓存预热的意义（新增少、总用户多）</li><li>缓存的空间不能太大，要预留给其他缓存空间</li><li>缓存数据的周期（此处每天一次）</li></ol><blockquote><p>分析优缺点的时候，要打开思路，从整个项目从 0 到 1 的链路上去分析</p></blockquote><h2 id="java里的实现方式"><a href="#java里的实现方式" class="headerlink" title="java里的实现方式"></a>java里的实现方式</h2><h4 id="springdata-Redis（推荐）"><a href="#springdata-Redis（推荐）" class="headerlink" title="springdata Redis（推荐）"></a>springdata Redis（推荐）</h4><p>通过的数据访问框架，定义了一组<strong>增删查改</strong>的接口</p><h2 id="定时任务实现"><a href="#定时任务实现" class="headerlink" title="定时任务实现"></a>定时任务实现</h2><ol><li>Spring Scheduler（spring boot 默认整合了，推荐这种方式）</li><li>Quartz（独立于 Spring 存在的定时任务框架）</li><li>XXL-Job 之类的分布式任务调度平台（界面 + sdk）</li></ol><p>采用第一种方式：</p><ol><li>主类开启 <a href="https://www.code-nav.cn/EnableScheduling">@EnableScheduling</a></li><li>给要定时执行的方法添加 <a href="https://www.code-nav.cn/Scheduling">@Scheduling </a>注解，指定 cron 表达式或者执行频率</li></ol><p>记住，不要去背 cron 表达式！！！用现成的工具即可：</p><ul><li><a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></li><li><a href="https://www.matools.com/crontab/">https://www.matools.com/crontab/</a></li></ul><h2 id="控制定时任务的执行"><a href="#控制定时任务的执行" class="headerlink" title="控制定时任务的执行"></a>控制定时任务的执行</h2><p>要控制定时任务在同一时间只有 1 个服务器能执行。</p><p>为啥？</p><ol><li>浪费资源，想象 10000 台服务器同时 “打鸣”</li><li>脏数据，比如重复插入</li></ol><p>怎么做？几种方案：</p><ol><li>分离定时任务程序和主程序，只在 1 个服务器运行定时任务。成本太大</li><li>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真实执行业务逻辑，其他的直接返回。成本最低；但是我们的 IP 可能是不固定的，把 IP 写的太死了</li><li>动态配置，配置是可以轻松的、很方便地更新的（代码无需重启），但是只有 ip 符合配置的服务器才真实执行业务逻辑。</li></ol><ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、Apollo、Spring Cloud Config）</li></ul><p>问题：服务器多了、IP 不可控还是很麻烦，还是要人工修改</p><ol><li>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</li></ol><p>注意，只要是单机，就会存在单点故障。</p><h2 id="控制定时任务的执行-1"><a href="#控制定时任务的执行-1" class="headerlink" title="控制定时任务的执行"></a>控制定时任务的执行</h2><p>要控制定时任务在同一时间只有 1 个服务器能执行。</p><p>为啥？</p><ol><li>浪费资源，想象 10000 台服务器同时 “打鸣”</li><li>脏数据，比如重复插入</li></ol><p>怎么做？几种方案：</p><ol><li>分离定时任务程序和主程序，只在 1 个服务器运行定时任务。成本太大</li><li>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真实执行业务逻辑，其他的直接返回。成本最低；但是我们的 IP 可能是不固定的，把 IP 写的太死了</li><li>动态配置，配置是可以轻松的、很方便地更新的（代码无需重启），但是只有 ip 符合配置的服务器才真实执行业务逻辑。</li></ol><ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、Apollo、Spring Cloud Config）</li></ul><p>问题：服务器多了、IP 不可控还是很麻烦，还是要人工修改</p><ol><li>分布式锁，只有抢到锁的服务器才能执行业务逻辑。坏处：增加成本；好处：不用手动配置，多少个服务器都一样。</li></ol><p>注意，只要是单机，就会存在单点故障。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>有限资源的情况下，控制同一时间（段）只有某些线程（用户 &#x2F; 服务器）能访问到资源。</p><p>Java 实现锁：synchronized 关键字、并发包的类</p><p>但存在问题：只对单个 JVM 有效</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="为啥需要分布式锁？"><a href="#为啥需要分布式锁？" class="headerlink" title="为啥需要分布式锁？"></a>为啥需要分布式锁？</h3><ol><li>有限资源的情况下，控制同一时间（段）只有某些线程（用户 &#x2F; 服务器）能访问到资源。</li><li>单个锁只对单个 JVM 有效</li></ol><h3 id="分布式锁实现的关键"><a href="#分布式锁实现的关键" class="headerlink" title="分布式锁实现的关键"></a>分布式锁实现的关键</h3><h4 id="抢锁机制"><a href="#抢锁机制" class="headerlink" title="抢锁机制"></a>抢锁机制</h4><p>怎么保证同一时间只有 1 个服务器能抢到锁？</p><p><strong>核心思想</strong> 就是：先来的人先把数据改成自己的标识（服务器 ip），后来的人发现标识已存在，就抢锁失败，继续等待。</p><p>等先来的人执行方法结束，把标识清空，其他的人继续抢锁。</p><p>MySQL 数据库：select for update 行级锁（最简单），或者用乐观锁。</p><p>Redis 实现：内存数据库，读写速度快。支持 setnx、lua 脚本，比较方便我们实现分布式锁。</p><p>setnx：set if not exists 如果不存在，则设置；只有设置成功才会返回 true，否则返回 false。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1）用完锁要释放（腾地方）</p><p>2）锁一定要加过期时间</p><p>3）如果方法执行时间过长，锁提前过期了？</p><p>会导致问题：</p><ol><li>连锁效应：释放掉别人的锁</li><li>这样还是会存在多个方法同时执行的情况</li></ol><p>解决方案：续期</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">end</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!end)&#125;&#123;</span><br><span class="line">    续期</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">end = <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4）释放锁的时候，有可能先判断出是自己的锁，但这时锁过期了，最后还是释放了别人的锁</p><p>解决方案：Redis + lua 脚本保证操作原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原子操作</span></span><br><span class="line"><span class="keyword">if</span>(get lock == A) &#123;</span><br><span class="line">    <span class="comment">// set lock B</span></span><br><span class="line">    del lock</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5）Redis 如果是集群（而不是只有一个 Redis），如果分布式锁的数据不同步怎么办？</p><p>解决方案：<a href="https://blog.csdn.net/feiying0canglang/article/details/113258494">https://blog.csdn.net/feiying0canglang/article/details/113258494</a></p><p>拒绝自己实现！！！直接用现成的。</p><h3 id="Redisson-实现分布式锁"><a href="#Redisson-实现分布式锁" class="headerlink" title="Redisson 实现分布式锁"></a>Redisson 实现分布式锁</h3><p>Redisson 是一个 java 操作 Redis 的客户端， <strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis，完全感知不到 Redis 的存在。</strong></p><p>关键词：Java Redis 客户端，分布式数据网格，实现了很多 Java 里支持的集合。</p><h4 id="2-种引入方式"><a href="#2-种引入方式" class="headerlink" title="2 种引入方式"></a>2 种引入方式</h4><ol><li>spring boot starter 引入（不推荐，版本迭代太快，容易冲突）：<a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li><li>直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></li></ol><h4 id="使用-Redisson"><a href="#使用-Redisson" class="headerlink" title="使用 Redisson"></a>使用 Redisson</h4><p>示例代码如下，创建分布式列表：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list，数据存在本地 JVM 内存中</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.<span class="keyword">add</span>(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;list:&quot;</span> + list.<span class="keyword">get</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">list.<span class="keyword">remove</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据存在 redis 的内存中</span></span><br><span class="line">RList&lt;String&gt; rList = redissonClient.getList(<span class="string">&quot;test-list&quot;</span>);</span><br><span class="line">rList.<span class="keyword">add</span>(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;rlist:&quot;</span> + rList.<span class="keyword">get</span>(<span class="number">0</span>));</span><br><span class="line">rList.<span class="keyword">remove</span>(<span class="number">0</span>);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="分布式锁保证定时任务不重复执行"><a href="#分布式锁保证定时任务不重复执行" class="headerlink" title="分布式锁保证定时任务不重复执行"></a>分布式锁保证定时任务不重复执行</h4><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testWatchDog</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;yupao:precachejob:docache:lock&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 只有一个线程能获取到锁</span></span><br><span class="line">        <span class="keyword">if</span> (lock.tryLock(<span class="number">0</span>, -<span class="number">1</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">            <span class="comment">// todo 实际要执行的方法</span></span><br><span class="line">            doSomeThings();</span><br><span class="line">            System.out.println(<span class="string">&quot;getLock: &quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 只能释放自己的锁</span></span><br><span class="line">        <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unLock: &quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>waitTime 设置为 0，只抢一次，抢不到就放弃</li><li>注意释放锁要写在 finally 中</li></ol><h4 id="Redisson-看门狗机制"><a href="#Redisson-看门狗机制" class="headerlink" title="Redisson 看门狗机制"></a>Redisson 看门狗机制</h4><blockquote><p>redisson 中提供的续期机制</p></blockquote><p>开一个监听线程，如果方法还没执行完，就帮你重置 redis 锁的过期时间。1817468007737913346_0.4253178081581499</p><p>原理：</p><ol><li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（补到 30 秒）</li><li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li></ol><p>建议阅读：<a href="https://blog.csdn.net/qq_26222859/article/details/796452031817468007737913346_0.4394101624216342">https://blog.csdn.net/qq_26222859/article/details/796452031817468007737913346_0.4394101624216342</a></p><h3 id="其他分布式锁实现方式"><a href="#其他分布式锁实现方式" class="headerlink" title="其他分布式锁实现方式"></a>其他分布式锁实现方式</h3><p>Zookeeper 实现（不推荐）</p><h2 id="主要内容（前后端新功能开发）："><a href="#主要内容（前后端新功能开发）：" class="headerlink" title="主要内容（前后端新功能开发）："></a>主要内容（前后端新功能开发）：</h2><ol><li>组队功能需求分析</li><li>组队功能系统设计</li><li>创建队伍功能开发及测试</li><li>搜索队伍</li><li>更新队伍</li><li>加入队伍</li><li>退出队伍后端接口</li><li>解散队伍后端接口</li><li>前端创建队伍、队伍列表页开发</li></ol><h2 id="组队功能开发"><a href="#组队功能开发" class="headerlink" title="组队功能开发"></a>组队功能开发</h2><p>理解为王者荣耀匹配。</p><h3 id="理想的应用场景"><a href="#理想的应用场景" class="headerlink" title="理想的应用场景"></a>理想的应用场景</h3><p>我要跟别人一起参加竞赛或者做项目，可以发起队伍或者加入别人的队伍</p><h3 id="需求分析和排期"><a href="#需求分析和排期" class="headerlink" title="需求分析和排期"></a>需求分析和排期</h3><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0。</p><blockquote><p>队长、剩余的人数 聊天？ 公开 或 private 或加密 <strong>用户创建队伍最多 5 个</strong></p></blockquote><p>展示队伍列表，根据名称搜索队伍  P0，信息流中不展示已过期的队伍</p><p>修改队伍信息 P0 \\x7e P1</p><p>用户可以加入队伍（其他人、未满、未过期），允许加入多个队伍，但是要有个上限  P0</p><blockquote><p>是否需要队长同意？筛选审批？</p></blockquote><p>用户可以退出队伍（如果队长退出，权限转移给第二早加入的用户 —— 先来后到） P1</p><p>队长可以解散队伍 P0</p><p>分享队伍 &#x3D;&gt; 邀请其他用户加入队伍 P1</p><p>业务流程：</p><ol><li>生成分享链接（分享二维码）</li><li>用户访问链接，可以点击加入</li></ol><p>队伍人满后发送消息通知 P1</p><h3 id="系统（接口）设计"><a href="#系统（接口）设计" class="headerlink" title="系统（接口）设计"></a>系统（接口）设计</h3><h4 id="1、创建队伍"><a href="#1、创建队伍" class="headerlink" title="1、创建队伍"></a>1、创建队伍</h4><p>用户可以 <strong>创建</strong> 一个队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0</p><blockquote><p>队长、剩余的人数 聊天？ 公开 或 private 或加密 信息流中不展示已过期的队伍</p></blockquote><ol><li>请求参数是否为空？</li><li>是否登录，未登录不允许创建</li><li>校验信息<ol><li>队伍人数 &gt; 1 且 &lt;&#x3D; 20</li><li>队伍标题 &lt;&#x3D; 20</li><li>描述 &lt;&#x3D; 512</li><li>status 是否公开（int）不传默认为 0（公开）</li><li>如果 status 是加密状态，一定要有密码，且密码 &lt;&#x3D; 32</li><li>超时时间 &gt; 当前时间</li><li>校验用户最多创建 5 个队伍</li></ol></li><li>插入队伍信息到队伍表</li><li>插入用户  &#x3D;&gt; 队伍关系到关系表</li></ol><h4 id="2、查询队伍列表"><a href="#2、查询队伍列表" class="headerlink" title="2、查询队伍列表"></a>2、查询队伍列表</h4><p>分页展示队伍列表，根据名称、最大人数等搜索队伍  P0，信息流中不展示已过期的队伍。</p><ol><li>从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件</li><li>不展示已过期的队伍（根据过期时间筛选）</li><li>可以通过某个 <strong>关键词</strong> 同时对名称和描述查询</li><li><strong>只有管理员才能查看加密还有非公开的房间</strong></li><li>关联查询已加入队伍的用户信息</li><li><strong>关联查询已加入队伍的用户信息（可能会很耗费性能，建议大家用自己写 SQL 的方式实现）</strong></li></ol><p>实现方式</p><p>1）自己写SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="number">1.</span> 自己写 <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询队伍和创建人的信息</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> team t <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> t.userId <span class="operator">=</span> u.id</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询队伍和已加入队伍成员的信息</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">from</span> team t</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>         <span class="keyword">left</span> <span class="keyword">join</span> user_team ut <span class="keyword">on</span> t.id <span class="operator">=</span> ut.teamId</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>         <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> ut.userId <span class="operator">=</span> u.id;</span><br></pre></td></tr></table></figure><ol start="2"><li>用Mybatis-plus构造查询</li></ol><h4 id="3、修改队伍信息"><a href="#3、修改队伍信息" class="headerlink" title="3、修改队伍信息"></a>3、修改队伍信息</h4><ol><li>判断请求参数是否为空</li><li>查询队伍是否存在</li><li>只有管理员或者队伍的创建者可以修改</li><li>如果用户传入的新值和老值一致，就不用 update 了（可自行实现，降低数据库使用次数）</li><li><strong>如果队伍状态改为加密，必须要有密码</strong></li><li>更新成功</li></ol><h4 id="4、用户可以加入队伍"><a href="#4、用户可以加入队伍" class="headerlink" title="4、用户可以加入队伍"></a>4、用户可以加入队伍</h4><p>其他人、未满、未过期，允许加入多个队伍，但是要有个上限  P0</p><ol><li>用户最多加入 5 个队伍</li><li>队伍必须存在，只能加入未满、未过期的队伍</li><li>不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）</li><li>禁止加入私有的队伍</li><li>如果加入的队伍是加密的，必须密码匹配才可以</li><li>新增队伍 - 用户关联信息</li></ol><blockquote><p>注意，并发请求时可能出现问题</p></blockquote><p><strong>注意，一定要加上事务注解！！！！</strong> </p><h4 id="5、用户可以退出队伍"><a href="#5、用户可以退出队伍" class="headerlink" title="5、用户可以退出队伍"></a>5、用户可以退出队伍</h4><p>请求参数：队伍 id</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验我是否已加入队伍</li><li>如果队伍</li><li>只剩一人，队伍解散</li><li>还有其他人 1. 如果是队长退出队伍，权限转移给第二早加入的用户 —— 先来后到（只用取 id 最小的 2 条数据） 2. 非队长，自己退出队伍</li></ol><h4 id="6、队长可以解散队伍"><a href="#6、队长可以解散队伍" class="headerlink" title="6、队长可以解散队伍"></a>6、队长可以解散队伍</h4><p>请求参数：队伍 id</p><p>业务流程：</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验你是不是队伍的队长</li><li>移除所有加入队伍的关联信息</li><li>删除队伍</li></ol><h4 id="7、获取当前用户已加入的队伍"><a href="#7、获取当前用户已加入的队伍" class="headerlink" title="7、获取当前用户已加入的队伍"></a>7、获取当前用户已加入的队伍</h4><h4 id="8、获取当前用户创建的队伍"><a href="#8、获取当前用户创建的队伍" class="headerlink" title="8、获取当前用户创建的队伍"></a>8、获取当前用户创建的队伍</h4><p>复用 listTeam 方法，只新增查询条件，不做修改（开闭原则）</p><h3 id="使用事务注解"><a href="#使用事务注解" class="headerlink" title="使用事务注解"></a>使用事务注解</h3><p><a href="/Transactional(rollbackFor">@Transactional(rollbackFor </a> &#x3D; Exception.class)</p><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><p>队伍表team</p><p>字段：</p><ul><li>id 主键 bigint（最简单、连续，放 url 上比较简短，但缺点是爬虫）</li><li>name 队伍名称</li><li>description 描述</li><li>maxNum 最大人数</li><li>expireTime 过期时间</li><li>userId 创建人 id</li><li>status 0 - 公开，1 - 私有，2 - 加密</li><li>password 密码</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><p>示例sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> team</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">256</span>)       <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;队伍名称&#x27;</span>,</span><br><span class="line">    description <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">null</span> comment <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">    maxNum      <span class="type">int</span>      <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;最大人数&#x27;</span>,</span><br><span class="line">    expireTime  datetime <span class="keyword">null</span> comment <span class="string">&#x27;过期时间&#x27;</span>,</span><br><span class="line">    userId      <span class="type">bigint</span> comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    status      <span class="type">int</span>      <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;0 - 公开，1 - 私有，2 - 加密&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    createTime  datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime  datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    isDelete    tinyint  <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;队伍&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="用户-队伍表-user-team"><a href="#用户-队伍表-user-team" class="headerlink" title="用户 - 队伍表 user_team"></a>用户 - 队伍表 user_team</h4><p>两个关系：</p><ol><li>用户加了哪些队伍？</li><li>队伍有哪些用户？</li></ol><p>两种实现方式：</p><ol><li>建立用户 - 队伍关系表 teamId userId（便于修改，查询性能高一点，可以选择这个，不用全表遍历）</li><li>用户表补充已加入的队伍字段，队伍表补充已加入的用户字段（便于查询，不用写多对多的代码，可以直接根据队伍查用户、根据用户查队伍）</li></ol><h3 id="为什么要请求参数包装"><a href="#为什么要请求参数包装" class="headerlink" title="为什么要请求参数包装"></a>为什么要请求参数包装</h3><p>1.请求参数名称&#x2F;类型和实体类不一样</p><p>2.有一些用到的参数，如果要自动生成接口文档，会增加成本</p><h3 id="为什么需要包装类？"><a href="#为什么需要包装类？" class="headerlink" title="为什么需要包装类？"></a>为什么需要包装类？</h3><p>可能有些字段需要隐藏，不能返回给前端</p><p>或者有些字段某些方法是不关心的</p><p>字段：</p><ul><li>id 主键</li><li>userId 用户 id</li><li>teamId 队伍 id</li><li>joinTime 加入时间</li><li>createTime 创建时间</li><li>updateTime 更新时间isDelete 是否删除</li></ul><p>示例 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_team</span><br><span class="line">(</span><br><span class="line">    id           <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    userId            <span class="type">bigint</span> comment <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    teamId            <span class="type">bigint</span> comment <span class="string">&#x27;队伍id&#x27;</span>,</span><br><span class="line">    joinTime datetime  <span class="keyword">null</span> comment <span class="string">&#x27;加入时间&#x27;</span>,</span><br><span class="line">    createTime   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime   datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    isDelete     tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span></span><br><span class="line">)</span><br><span class="line">    comment <span class="string">&#x27;用户队伍关系&#x27;</span>;</span><br></pre></td></tr></table></figure><pre><code>    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();    queryWrapper.eq(&quot;userAccount&quot;, &quot;dogYupI1&quot;);    queryWrapper.eq(&quot;userPassword&quot;, &quot;12345678&quot;);    User user = userMapper.selectOne(queryWrapper);</code></pre><p>mybatis-plus 能把 userAccount &#x3D; dogyupI1 userPassword &#x3D; 12345678的用户数据查出</p><h2 id="前端不同页面怎么传递数据？"><a href="#前端不同页面怎么传递数据？" class="headerlink" title="前端不同页面怎么传递数据？"></a>前端不同页面怎么传递数据？</h2><ol><li>url querystring（xxx?id&#x3D;1） 比较适用于页面跳转</li><li>url（&#x2F;team&#x2F;:id，xxx&#x2F;1）</li><li>hash (&#x2F;team#1)</li><li>localStorage</li><li>context（全局变量，同页面或整个项目要访问公共变量）</li></ol><h2 id="随机匹配"><a href="#随机匹配" class="headerlink" title="随机匹配"></a>随机匹配</h2><p>需求背景：为了帮大家更快地发现和自己兴趣相同的朋友</p><p>思考：匹配 1 个还是匹配多个？</p><p>答：匹配多个，并且按照匹配的相似度从高到低排序</p><p>思考：怎么匹配？（根据什么匹配）</p><p>答：标签 tags</p><blockquote><p>还可以根据 user_team 匹配加入相同队伍的用户</p></blockquote><p>问题本质：找到有相似标签的用户</p><p>举例：</p><ul><li>用户 A：[Java, 大一, 男]</li><li>用户 B：[Java, 大二, 男]</li><li>用户 C：[Python, 大二, 女]</li><li>用户 D：[Java, 大一, 女]</li></ul><h3 id="1、怎么匹配？"><a href="#1、怎么匹配？" class="headerlink" title="1、怎么匹配？"></a>1、怎么匹配？</h3><ol><li>找到有共同标签最多的用户（TopN）</li><li>共同标签越多，分数越高，越排在前面</li><li>如果没有匹配的用户，随机推荐几个（降级方案）</li></ol><h4 id="两种算法"><a href="#两种算法" class="headerlink" title="两种算法"></a>两种算法</h4><p>编辑距离算法：<a href="https://blog.csdn.net/DBC_121/article/details/104198838">https://blog.csdn.net/DBC_121/article/details/104198838</a></p><blockquote><p>最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2</p></blockquote><p>余弦相似度算法：<a href="https://blog.csdn.net/m0_55613022/article/details/125683937%EF%BC%88%E5%A6%82%E6%9E%9C%E9%9C%80%E8%A6%81%E5%B8%A6%E6%9D%83%E9%87%8D%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%AF%94%E5%A6%82%E5%AD%A6%E4%BB%80%E4%B9%88%E6%96%B9%E5%90%91%E6%9C%80%E9%87%8D%E8%A6%81%EF%BC%8C%E6%80%A7%E5%88%AB%E7%9B%B8%E5%AF%B9%E6%AC%A1%E8%A6%81%EF%BC%89">https://blog.csdn.net/m0_55613022/article/details/125683937（如果需要带权重计算，比如学什么方向最重要，性别相对次要）</a></p><h3 id="2、怎么对所有用户匹配，取-TOP？"><a href="#2、怎么对所有用户匹配，取-TOP？" class="headerlink" title="2、怎么对所有用户匹配，取 TOP？"></a>2、怎么对所有用户匹配，取 TOP？</h3><p>直接取出所有用户，依次和当前用户计算分数，取 TOP N（54 秒）</p><h4 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h4><ol><li>切忌不要在数据量大的时候循环输出日志（取消掉日志后 20 秒）</li><li>Map 存了所有的分数信息，占用内存</li></ol><p>解决：维护一个固定长度的有序集合（sortedSet），只保留分数最高的几个用户（时间换空间）</p><p>e.g.【3, 4, 5, 6, 7】取 TOP 5，id 为 1 的用户就不用放进去了 3. 细节：剔除自己 √ 4. 尽量只查需要的数据：</p><ol><li>过滤掉标签为空的用户 √</li><li>根据部分标签取用户（前提是能区分出来哪个标签比较重要）</li><li>只查需要的数据（比如 id 和 tags） √（7.0s）</li><li>提前查？（定时任务）</li><li>提前把所有用户给缓存（不适用于经常更新的数据）</li><li>提前运算出来结果，缓存（针对一些重点用户，提前缓存）</li></ol><h4 id="分表学习建议"><a href="#分表学习建议" class="headerlink" title="分表学习建议"></a>分表学习建议</h4><p>1）mycat、sharding sphere 框架</p><p>2）一致性 hash 算法</p><h4 id="类比大数据推荐机制"><a href="#类比大数据推荐机制" class="headerlink" title="类比大数据推荐机制"></a>类比大数据推荐机制</h4><p>大数据推荐场景：比如说有几亿个商品，难道要查出来所有的商品？难道要对所有的数据计算一遍相似度？</p><p>大数据推荐流程：</p><ul><li>检索 &#x3D;&gt; 召回 &#x3D;&gt; 粗排 &#x3D;&gt; 精排 &#x3D;&gt; 重排序等等</li><li>检索：尽可能多地查符合要求的数据（比如按记录查）</li><li>召回：查询可能要用到的数据（不做运算）</li><li>粗排：粗略排序，简单地运算（运算相对轻量）</li><li>精排：精细排序，确定固定排位</li></ul><h4 id="分表学习建议-1"><a href="#分表学习建议-1" class="headerlink" title="分表学习建议"></a>分表学习建议</h4><p>1）mycat、sharding sphere 框架</p><p>2）一致性 hash 算法</p><h2 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h2><p>1）前端导航栏死【标题】问题</p><p>2）强制登录，自动跳转到登录页</p><p>解决：axios 全局配置响应拦截、并且添加重定向</p><p>3）区分公开和加密房间；加入有密码的房间，要指定密码</p><p>4）展示已加入队伍人数</p><p>5）并发时，重复加入队伍的问</p><p>解决：加锁、分布式锁</p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>先区分多环境：前端区分开发和线上接口，后端 prod 改为用线上公网可访问的数据库</p><h3 id="免备案上线方案"><a href="#免备案上线方案" class="headerlink" title="免备案上线方案"></a>免备案上线方案</h3><p>前端：Vercel（免费）<a href="https://vercel.com/">https://vercel.com/</a></p><p>后端：微信云托管（部署容器的平台，付费）<a href="https://cloud.weixin.qq.com/cloudrun/service">https://cloud.weixin.qq.com/cloudrun/service</a></p><h2 id="java8-stream流"><a href="#java8-stream流" class="headerlink" title="java8 stream流"></a>java8 stream流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;UserTeam&gt; userTeamStream = userTeamList.stream();</span><br><span class="line">Map&lt;Integer, List&lt;UserTeam&gt;&gt; groupedByUserId = userTeamStream.collect(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Collector</span>&lt;UserTeam, List&lt;UserTeam&gt;, Map&lt;Integer, List&lt;UserTeam&gt;&gt;&gt;(</span><br><span class="line">        () -&gt; <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">        (map, userTeam) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">userId</span> <span class="operator">=</span> userTeam.getUserId();</span><br><span class="line">            map.computeIfAbsent(userId, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(userTeam);</span><br><span class="line">        &#125;,</span><br><span class="line">        (map1, map2) -&gt; &#123;</span><br><span class="line">            map2.forEach((key, value) -&gt; </span><br><span class="line">                map1.merge(key, value, (list1, list2) -&gt; &#123;</span><br><span class="line">                    list1.addAll(list2);</span><br><span class="line">                    <span class="keyword">return</span> list1;</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">return</span> map1;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;UserTeam&gt;&gt; groupedByUserId = userTeamList.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(UserTeam::getUserId));</span><br><span class="line"></span><br><span class="line">UserTeam::getUserId 是一个方法引用，指向 UserTeam 类中的 getUserId 方法。它的展开式可以表示为一个 lambda 表达式：</span><br><span class="line"></span><br><span class="line">userTeam -&gt; userTeam.getUserId()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出不重复的队伍 id</span></span><br><span class="line"><span class="comment">// teamId   userId</span></span><br><span class="line"><span class="number">1</span> ,<span class="number">2</span></span><br><span class="line">    <span class="number">1</span> ,<span class="number">3</span></span><br><span class="line">    <span class="number">2</span> ,<span class="number">3</span></span><br><span class="line">        </span><br><span class="line">  result</span><br><span class="line">     <span class="number">1</span> =&gt; <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">     <span class="number">2</span> =&gt; <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口查询&quot;&gt;&lt;a href=&quot;#接口查询&quot; class=&quot;headerlink&quot; title=&quot;接口查询&quot;&gt;&lt;/a&gt;接口查询&lt;/h2&gt;&lt;p&gt;​	1.sql查询（实现简单，可以拆分查询进一步优化）&lt;/p&gt;
&lt;p&gt;​	2.内存查询（灵活，可以通过并发进一步优化）&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/posts/4a17b156.html"/>
    <id>http://example.com/posts/4a17b156.html</id>
    <published>2024-08-03T08:47:08.000Z</published>
    <updated>2024-08-03T08:47:16.766Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><br>test<br>test</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
